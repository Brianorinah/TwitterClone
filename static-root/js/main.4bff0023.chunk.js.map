{"version":3,"sources":["logo.svg","lookup/components.js","tweets/detail.js","tweets/list.js","tweets/lookup.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BackendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","setRequestHeader","onload","response","status","onerror","e","console","log","message","send","Tweet","props","tweet","didRetweet","hideActions","useState","match","className","window","location","pathname","urlTweetId","groups","tweetid","id","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updatedTweetsInit","unshift","updatedFinalTweets","map","item","index","key","TweetCreate","didTweet","textAreaRef","React","createRef","handleBackendUpdate","onSubmit","event","preventDefault","newVal","current","value","content","ref","required","type","TweetsComponent","canTweet","setNewTweets","temptNewTweets","TweetDetailComponent","tweetId","lookup","setDidLookup","setTweet","handlebackendLookUp","apiTweetDetail","App","src","logo","alt","href","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","StrictMode","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4bff0023.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    var cookies = document.cookie.split(\";\");\r\n    for (var i = 0; i < cookies.length; i++) {\r\n      var cookie = cookies[i].trim();\r\n      // Does this cookie string begin with the name we want?\r\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function BackendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n\r\n  if (data) {\r\n    jsonData = JSON.stringify(data);\r\n  }\r\n\r\n  const xhr = new XMLHttpRequest();\r\n  const url = `http://localhost:8000/api${endpoint}`;\r\n  xhr.responseType = \"json\";\r\n  xhr.open(method, url);\r\n  const csrftoken = getCookie(\"csrftoken\");\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n  if (csrftoken) {\r\n   // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\r\n  }\r\n\r\n  xhr.onload = function () {\r\n    callback(xhr.response, xhr.status);\r\n  };\r\n  xhr.onerror = function (e) {\r\n    console.log(e);\r\n    callback({ message: \"The request was an error\" }, 400);\r\n  };\r\n  \r\n  \r\n  xhr.send(jsonData);\r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport { ActionBtn } from \"./buttons\";\r\n\r\nexport function ParentTweet(props) {\r\n  const { tweet } = props;\r\n\r\n  return tweet.parent ? (\r\n    <div className=\"row\">\r\n      <div className=\"col-11 p-3 mx-auto border rounded\">\r\n        <p className=\"mb-0 text-muted small\">Retweet</p>\r\n        <Tweet hideActions className={\"\"} tweet={tweet.parent} />\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n}\r\n\r\nexport function Tweet(props) {\r\n  const { tweet, didRetweet, hideActions } = props;\r\n  const [actionTweet, setActionTweet] = useState(\r\n    props.tweet ? props.tweet : null\r\n  );\r\n  const className = props.className\r\n    ? props.className\r\n    : \"col-10 mx-auto col-md-6\";\r\n\r\n  const path = window.location.pathname;\r\n  const match = path.match(/(?<tweetid>\\d+)/);\r\n  const urlTweetId = match ? match.groups.tweetid : -1;\r\n  const isDetail = `${tweet.id}` === `${urlTweetId}`;\r\n\r\n  if (match) {\r\n  }\r\n  const handleLink = (event) => {\r\n    event.preventDefault();\r\n    window.location.href = `/${tweet.id}`;\r\n  };\r\n\r\n  const handlePerformAction = (newActionTweet, status) => {\r\n    if (status === 200) {\r\n      setActionTweet(newActionTweet);\r\n    } else if (status === 201) {\r\n      if (didRetweet) {\r\n        didRetweet(newActionTweet);\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    //Changed className={className} to className={''}\r\n    <div className={''}>\r\n      <div>\r\n        <p>\r\n          {tweet.id}-{tweet.content}\r\n        </p>\r\n        <ParentTweet tweet={tweet} />\r\n      </div>\r\n      <div className=\"btn btn-group\">\r\n        {actionTweet && hideActions !== true && (\r\n          <React.Fragment>\r\n            <ActionBtn\r\n              tweet={actionTweet}\r\n              didPerformAction={handlePerformAction}\r\n              action={{ type: \"like\", display: \"Likes\" }}\r\n            />\r\n            <ActionBtn\r\n              tweet={actionTweet}\r\n              didPerformAction={handlePerformAction}\r\n              action={{ type: \"unLike\", display: \"UnLike\" }}\r\n            />\r\n            <ActionBtn\r\n              tweet={actionTweet}\r\n              didPerformAction={handlePerformAction}\r\n              action={{ type: \"retweet\", display: \"Retweet\" }}\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n        {isDetail === true ? null : (\r\n          <button className=\"btn btn-outline-primary btn-sm\" onClick={handleLink}>\r\n            View\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { apiTweetList} from \"./lookup\";\r\nimport {Tweet} from './detail'\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([]);\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false);\r\n  \r\n    useEffect(() => {\r\n      const final = [...props.newTweets].concat(tweetsInit);\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final);\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit]);\r\n  \r\n    useEffect(() => {\r\n      if (tweetsDidSet === false) {\r\n        const handleTweetListLookup = (response, status) => {\r\n          if (status === 200) {\r\n            setTweetsInit(response);\r\n            setTweetsDidSet(true);\r\n          } else {\r\n            alert(\"There was an error\");\r\n          }\r\n        };\r\n        apiTweetList(props.username, handleTweetListLookup);\r\n      }\r\n    }, [tweetsDidSet, setTweetsDidSet, props.username]);\r\n  \r\n    const handleDidRetweet = (newTweet) => {\r\n      const updatedTweetsInit = [...tweetsInit];\r\n      updatedTweetsInit.unshift(newTweet);\r\n      setTweetsInit(updatedTweetsInit);\r\n  \r\n      const updatedFinalTweets = [...tweets];\r\n      updatedFinalTweets.unshift(tweets);\r\n      setTweets(updatedFinalTweets);\r\n    };\r\n    return tweets.map((item, index) => {\r\n      return (\r\n        <Tweet\r\n          tweet={item}\r\n          didRetweet={handleDidRetweet}\r\n          className=\"my-5 py-5 border bg-white text-dark\"\r\n          key={`${index}-{item.id}`}\r\n        />\r\n      );\r\n    });\r\n  }","import { BackendLookup } from \"../lookup\";\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n  BackendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet });\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback) {\r\n  const data = { id: tweetId, action: action };\r\n  BackendLookup(\"POST\", \"/tweets/action/\", callback, data);\r\n}\r\n\r\nexport function apiTweetDetail(tweetId, callback) {\r\n  BackendLookup(\"GET\", `/tweets/${tweetId}`, callback);\r\n}\r\n\r\nexport function apiTweetList(username, callback) {\r\n  //Get Http request that returns a JSON\r\n  let endpoint = \"/tweets/\";\r\n  if (username) {\r\n    endpoint = `/tweets/?username=${username}`;\r\n  }\r\n  BackendLookup(\"GET\", endpoint, callback);\r\n}\r\n","import React from \"react\";\r\nimport { apiTweetCreate } from \"./lookup\";\r\n\r\n\r\nexport function TweetCreate(props) {\r\n  const { didTweet } = props;\r\n\r\n  const textAreaRef = React.createRef();\r\n  const handleBackendUpdate = (response, status) => {\r\n    if (status === 201) {\r\n      didTweet(response);\r\n    } else {\r\n      console.log(response);\r\n\r\n      alert(\"An error has occured please try again!\");\r\n    }\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const newVal = textAreaRef.current.value;\r\n    //backend api request\r\n    apiTweetCreate(newVal, handleBackendUpdate);\r\n    textAreaRef.current.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea\r\n          ref={textAreaRef}\r\n          required={true}\r\n          className=\"form-control\"\r\n          name=\"tweet\"\r\n        ></textarea>\r\n        <button type=\"submit\" className=\"btn btn-primary py-3\">\r\n          Tweet\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { TweetsList } from \"./list\";\r\nimport { TweetCreate } from \"./create\";\r\nimport { apiTweetDetail } from \"./lookup\";\r\nimport { Tweet } from \"./detail\";\r\n\r\nexport function TweetsComponent(props) {\r\n  //Receives username props from index.html data-username attribute\r\n  const canTweet = props.canTweet === \"false\" ? false : true;\r\n  const [newTweets, setNewTweets] = useState([]);\r\n  const handleNewTweet = (newTweet) => {\r\n    //backend api response handler\r\n    let temptNewTweets = [...newTweets];\r\n    temptNewTweets.unshift(newTweet);\r\n    setNewTweets(temptNewTweets);\r\n  };\r\n  return (\r\n    <div className={props.className}>\r\n      {canTweet === true && (\r\n        <TweetCreate didTweet={handleNewTweet} className=\"col-12 mb-3\" />\r\n      )}\r\n      <TweetsList newTweets={newTweets} {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TweetDetailComponent(props) { \r\n\r\n  const { tweetId } = props;\r\n  const [lookup, setDidLookup] = useState(false);\r\n  const [tweet, setTweet] = useState(null);\r\n\r\n  const handlebackendLookUp = (response, status) => {\r\n    if (status === 200) {\r\n      setTweet(response);\r\n    } else {\r\n      alert(\"There was an error finding your tweet.\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (lookup === false) {\r\n      apiTweetDetail(tweetId, handlebackendLookUp);\r\n\r\n      setDidLookup(true);\r\n    }\r\n  }, [tweetId, lookup, setDidLookup]);\r\n\r\n  return tweet === null ? null : (\r\n    <Tweet tweet={tweet} className={props.className} />\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n\nfunction App() {   \n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n        <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { TweetsComponent ,TweetDetailComponent} from \"./tweets\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst e = React.createElement;\nconst tweetsEl = document.getElementById(\"tweetme\");\nif (tweetsEl) {\n  ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\ntweetDetailElements.forEach(container =>{\n  ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}